const express = require('express');
const cors = require('cors');

const app = express();
const port = process.env.PORT || 8080;

app.use(cors());
app.use(express.json());

// Liste de rÃ©ponses du chatbot
const faq = [
  {
    keywords: ['bonjour', 'salut', 'hello'],
    reply: 'Salut ! Je suis ton assistant pour le projet. Veux-tu en savoir plus sur le projet ou sur les outils utilisÃ©s ?',
    suggestions: ['Quâ€™est-ce que ce projet ?', 'Quels outils utilisez-vous ?', 'Comment Ã§a fonctionne ?']
  },
  {
    keywords: ['projet', 'objectif', 'but'],
    reply: 'Ce projet est un assistant virtuel pour aider Ã  comprendre lâ€™infrastructure, le dÃ©ploiement et les outils de monitoring.',
    suggestions: ['Comment Ã§a fonctionne ?', 'Quels sont les composants du projet ?']
  },
  {
    keywords: ['fonctionnement', 'comment', 'marche'],
    reply: 'Le projet combine un backend Node.js, un frontend React, et des outils comme Grafana et Prometheus pour le monitoring. Les utilisateurs peuvent poser des questions et obtenir des rÃ©ponses sur le projet.',
    suggestions: ['Quels outils sont utilisÃ©s ?', 'Peux-tu mâ€™expliquer Grafana ?', 'Que fait Prometheus ?']
  },
  {
    keywords: ['grafana'],
    reply: 'Grafana est utilisÃ© pour visualiser les mÃ©triques sous forme de dashboards interactifs.',
    suggestions: ['Que fait Prometheus ?', 'Quels types de mÃ©triques sont surveillÃ©s ?']
  },
  {
    keywords: ['prometheus'],
    reply: 'Prometheus collecte et stocke les mÃ©triques du cluster, ce qui permet de surveiller la santÃ© et les performances du systÃ¨me.',
    suggestions: ['Peux-tu mâ€™expliquer Grafana ?', 'Comment Ã§a fonctionne ensemble ?']
  },
  {
    keywords: ['aide', 'support', 'guide'],
    reply: 'Je peux tâ€™expliquer le projet, ses composants, ou te guider dans le dÃ©ploiement et lâ€™utilisation des outils.',
    suggestions: ['Quâ€™est-ce que ce projet ?', 'Comment Ã§a fonctionne ?', 'Quels outils utilisez-vous ?']
  },
  {
    keywords: ['merci', 'ok', 'super'],
    reply: 'Avec plaisir ! Tu veux poser une autre question ou que je te propose des questions ?',
    suggestions: ['Oui, propose-moi des questions', 'Non, merci']
  }
];

// Fonction pour trouver la rÃ©ponse
function getReply(message) {
  const lowerMsg = message.toLowerCase();

  for (const item of faq) {
    if (item.keywords.some(kw => lowerMsg.includes(kw))) {
      return { reply: item.reply, suggestions: item.suggestions };
    }
  }

  // RÃ©ponse par dÃ©faut
  return { 
    reply: "Je ne suis pas sÃ»r de comprendre. Veux-tu que je te propose des questions ?", 
    suggestions: ['Quâ€™est-ce que ce projet ?', 'Comment Ã§a fonctionne ?', 'Quels outils utilisez-vous ?'] 
  };
}

// Routes
app.get('/', (req, res) => res.send('ðŸ¤– Chatbot Backend Running'));

app.post('/api/chat', (req, res) => {
  const { message } = req.body;
  if (!message) return res.status(400).json({ error: 'Message is required' });

  const { reply, suggestions } = getReply(message);
  res.json({ reply, suggestions });
});

app.listen(port, () => console.log(`âœ… Server running on port ${port}`));
